package hibernate.merlin_hibernate.dao.implementation;

import java.util.List;

import org.hibernate.SessionFactory;

import hibernate.merlin_hibernate.entities.TransportersAnnotationGenesHasMetabolitesHasType;
import hibernate.merlin_hibernate.dao.Interface.ITransportersAnnotationGenesHasMetabolitesHasTypeDAO;


public class TransportersAnnotationGenesHasMetabolitesHasTypeDAOImpl extends GenericDaoImpl<TransportersAnnotationGenesHasMetabolitesHasType> implements ITransportersAnnotationGenesHasMetabolitesHasTypeDAO{

	public TransportersAnnotationGenesHasMetabolitesHasTypeDAOImpl(SessionFactory sessionFactory) {
		super(sessionFactory, TransportersAnnotationGenesHasMetabolitesHasType.class);

	}

	public void addTransportersAnnotationGenesHasMetabolitesHasType(TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType) {
		super.save(transportersAnnotationGenesHasMetabolitesHasType);
		
	}
	
	public void addTransportersAnnotationGenesHasMetabolitesHasTypeList(List<TransportersAnnotationGenesHasMetabolitesHasType> transportersAnnotationGenesHasMetabolitesHasTypeList) {
		for (TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType: transportersAnnotationGenesHasMetabolitesHasTypeList) {
			this.addTransportersAnnotationGenesHasMetabolitesHasType(transportersAnnotationGenesHasMetabolitesHasType);
		}
		
	}
	public List<TransportersAnnotationGenesHasMetabolitesHasType> getAllTransportersAnnotationGenesHasMetabolitesHasType() {
		return super.findAll();
	}

	public TransportersAnnotationGenesHasMetabolitesHasType getTransportersAnnotationGenesHasMetabolitesHasType(Integer id) {
		return super.findById(id);
	}

	public void removeTransportersAnnotationGenesHasMetabolitesHasType(TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType) {
		super.delete(transportersAnnotationGenesHasMetabolitesHasType);
		
	}

	public void removeTransportersAnnotationGenesHasMetabolitesHasTypeList(List<TransportersAnnotationGenesHasMetabolitesHasType> transportersAnnotationGenesHasMetabolitesHasTypeList) {
		for (TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType: transportersAnnotationGenesHasMetabolitesHasTypeList) {
			this.removeTransportersAnnotationGenesHasMetabolitesHasType(transportersAnnotationGenesHasMetabolitesHasType);
		}
		
	}

	public void updateTransportersAnnotationGenesHasMetabolitesHasTypeList(List<TransportersAnnotationGenesHasMetabolitesHasType> transportersAnnotationGenesHasMetabolitesHasTypeList) {
		for (TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType: transportersAnnotationGenesHasMetabolitesHasTypeList) {
			this.update(transportersAnnotationGenesHasMetabolitesHasType);
		}
		
	}

	public void updateTransportersAnnotationGenesHasMetabolitesHasType(TransportersAnnotationGenesHasMetabolitesHasType transportersAnnotationGenesHasMetabolitesHasType) {
		super.update(transportersAnnotationGenesHasMetabolitesHasType);
	}

}
